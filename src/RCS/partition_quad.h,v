head	1.3;
access;
symbols;
locks; strict;
comment	@ * @;


1.3
date	2010.06.28.10.03.22;	author r97124;	state Exp;
branches;
next	1.2;

1.2
date	2010.06.25.07.22.51;	author r97124;	state Exp;
branches;
next	1.1;

1.1
date	2010.06.25.03.01.13;	author r97124;	state Exp;
branches;
next	;


desc
@@


1.3
log
@*** empty log message ***
@
text
@#ifndef PARTITION_QUAD_H
#define PARTITION_QUAD_H

#include <limits.h>
#include <gdsl_queue.h>
#include <gdsl_types.h>
#include <amd.h>

#include "partition_double.h"
#include "sparsedoublematrix.h"
#include "sparsequadmatrix.h"
#include "mempool.h"




// =====================================================================================

// amd reordering
void amdSparseQuadMatrix(SparseQuadMatrix *p,const SparseQuadMatrix *a);



void partitionSparseQuadMatrix(SparseQuadMatrix *p,SparseQuadMatrix *pTrans,ParallelETree *tree,SparseQuadMatrix *aRefine,const SparseQuadMatrix *a,const int goalPartition);

#endif
@


1.2
log
@*** empty log message ***
@
text
@d22 4
@


1.1
log
@Initial revision
@
text
@d7 1
a7 1
#include <metis.h>
d11 1
d19 2
a20 8
// use amd directly to reorder the matrix a
void amdSparseQuadMatrix(SparseDoubleMatrix *p,const SparseQuadMatrix *a);

// the tree here is assumed already renaming
void roughPartition(ParallelETree *tree, SparseDoubleMatrix *p, const SparseDoubleMatrix *g, const int goalPartition);

// assuming g is already permutated by "p" which is generated by roughPartition
void refinePartition(SparseDoubleMatrix *p,const ParallelETree *tree, const SparseDoubleMatrix *g);
@
