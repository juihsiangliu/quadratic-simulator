head	1.4;
access;
symbols;
locks; strict;
comment	@ * @;


1.4
date	2010.09.07.13.05.10;	author d96041;	state Exp;
branches;
next	1.3;

1.3
date	2010.09.06.13.02.46;	author d96041;	state Exp;
branches;
next	1.2;

1.2
date	2010.08.25.12.56.19;	author d96041;	state Exp;
branches;
next	1.1;

1.1
date	2010.06.25.09.42.34;	author r97124;	state Exp;
branches;
next	;


desc
@@


1.4
log
@ok version
@
text
@#ifndef SOLVESPARSEQUADMATRIX_H
#define SOLVESPARSEQUADMATRIX_H

#include <stdlib.h>
#include <gsl/gsl_math.h>
#include <math.h>

#include "quadelement.h"
#include "quadmatrix.h"
#include "mempool.h"
#include "sparsedoublematrix.h"
#include "sparsequadmatrix.h"
#include "partition_quad.h"
#include "parallel_lu_quad.h"

// a = lu
void luSparseQuadMatrix(SparseQuadMatrix *l, SparseQuadMatrix *u,const SparseQuadMatrix *a);
void luPidSparseQuadMatrix(SparseQuadMatrix *l, SparseQuadMatrix *u,const SparseQuadMatrix *a,const int pid);

//      ax = b
// -> plux = b
// ->  lux = pb  , y = ux 
// ->   ly = pb
// solve y , then solve ux = y
void triSolveSparseQuadMatrix(QuadMatrix *x,const SparseQuadMatrix *p, const SparseQuadMatrix *pTrans, const SparseQuadMatrix *l,const SparseQuadMatrix *u, const QuadMatrix *b); 

// directly use luSparseQuadMatrix() and triSolveSparseQuadMatrix() to solve Ax = b
void solveSparseQuadMatrix(QuadMatrix *x,const SparseQuadMatrix *A,const QuadMatrix *b,const int threadNum);

// directly use luSparseQuadMatrix() and triSolveSparseQuadMatrix() to solve Ax = b with pre-defined permutation matrix - p and pTrans
void solveWithPermutationSparseQuadMatrix(QuadMatrix *x, const SparseQuadMatrix *p, const SparseQuadMatrix *pTrans, const SparseQuadMatrix *A,const QuadMatrix *b,const int threadNum,ParallelETree *tree);


// defined in parallel_lu_quad.h
extern void parallelLUQuad(SparseQuadMatrix *l,SparseQuadMatrix *u, ParallelETree *tree, const SparseQuadMatrix *a, const int threadNum);

#endif
@


1.3
log
@ok version ~ add the extern parallel_quad_solve to here
@
text
@d17 2
a18 2
void luSparseQuadMatrix(SparseQuadMatrix *l, SparseQuadMatrix *u,const SparseQuadMatrix *a,const int threadNum);
void luPidSparseQuadMatrix(SparseQuadMatrix *l, SparseQuadMatrix *u,const SparseQuadMatrix *a,const int threadNum,const int pid);
d31 1
a31 1
void solveWithPermutationSparseQuadMatrix(QuadMatrix *x, const SparseQuadMatrix *p, const SparseQuadMatrix *pTrans, const SparseQuadMatrix *A,const QuadMatrix *b,const int threadNum);
@


1.2
log
@ok version ~ pid lu ~
@
text
@d14 1
a14 1

d34 3
@


1.1
log
@Initial revision
@
text
@d18 1
@
