head	1.4;
access;
symbols;
locks
	d96041:1.4; strict;
comment	@ * @;


1.4
date	2010.11.14.12.54.27;	author d96041;	state Exp;
branches;
next	1.3;

1.3
date	2010.07.08.12.43.21;	author d96041;	state Exp;
branches;
next	1.2;

1.2
date	2010.06.25.03.01.13;	author r97124;	state Exp;
branches;
next	1.1;

1.1
date	2010.06.24.09.04.14;	author r97124;	state Exp;
branches;
next	;


desc
@@


1.4
log
@*** empty log message ***
@
text
@#ifndef SOLVESPARSEDOUBLEMATRIX_H
#define SOLVESPARSEDOUBLEMATRIX_H


#include "mempool.h"
#include "sparsedoublematrix.h"
#include "partition_double.h"

// a = lu
void luSparseDoubleMatrix(SparseDoubleMatrix *l, SparseDoubleMatrix *u,const SparseDoubleMatrix *a);
void luPidSparseDoubleMatrix(SparseDoubleMatrix *l, SparseDoubleMatrix *u,const SparseDoubleMatrix *a,const int pid);

//      ax = b
// -> plux = b
// ->  lux = pb  , y = ux 
// ->   ly = pb
// solve y , then solve ux = y
void triSolveSparseDoubleMatrix(double *x,const SparseDoubleMatrix *p, const SparseDoubleMatrix *pTrans, const SparseDoubleMatrix *l,const SparseDoubleMatrix *u, const double *b); 

// directly use luSparseQuadMatrix() and triSolveSparseQuadMatrix() to solve Ax = b
void solveSparseDoubleMatrix(double *x,const SparseDoubleMatrix *A,const double *b);

// directly use luSparseQuadMatrix() and triSolveSparseQuadMatrix() to solve Ax = b with pre-defined permutation matrix - p and pTrans
void solveWithPermutationSparseDoubleMatrix(double *x, const SparseDoubleMatrix *p, const SparseDoubleMatrix *pTrans, const SparseDoubleMatrix *A,const double *b);


// a = ll^t ... the fake version
void cholSparseDoubleMatrix(SparseDoubleMatrix *l, const SparseDoubleMatrix *a);


#endif
@


1.3
log
@*** empty log message ***
@
text
@d10 2
a11 1
void luSparseDoubleMatrix(SparseDoubleMatrix *l, SparseDoubleMatrix *u,const SparseDoubleMatrix *a,const int threadNum);
d21 1
a21 1
void solveSparseDoubleMatrix(double *x,const SparseDoubleMatrix *A,const double *b,const int threadNum);
d24 1
a24 1
void solveWithPermutationSparseDoubleMatrix(double *x, const SparseDoubleMatrix *p, const SparseDoubleMatrix *pTrans, const SparseDoubleMatrix *A,const double *b,const int threadNum);
@


1.2
log
@*** empty log message ***
@
text
@d26 3
@


1.1
log
@Initial revision
@
text
@d7 1
a7 1
#include "partition.h"
@
