head	1.6;
access;
symbols;
locks; strict;
comment	@ * @;


1.6
date	2010.09.17.08.57.06;	author d96041;	state Exp;
branches;
next	1.5;

1.5
date	2010.09.14.16.20.57;	author d96041;	state Exp;
branches;
next	1.4;

1.4
date	2010.09.12.05.54.50;	author d96041;	state Exp;
branches;
next	1.3;

1.3
date	2010.06.28.12.54.39;	author r97124;	state Exp;
branches;
next	1.2;

1.2
date	2010.06.25.09.42.34;	author r97124;	state Exp;
branches;
next	1.1;

1.1
date	2010.06.24.09.04.14;	author r97124;	state Exp;
branches;
next	;


desc
@@


1.6
log
@ok version
@
text
@#ifndef QUADNONLINEAR_H
#define QUADNONLINEAR_H

#include "quadmatrix.h"
#include "parser.h"
#include "sparsequadmatrix.h"
#include "mempool.h"
#include "mymatrix.h"
#include "sparsegvarient.h"
#include "solvesparsequadmatrix.h"
#include "parallel.h"

// used for the nonlinear simulation
struct GVarientIJQuad
{
	QuadElement *gVarientElement; 
	// need be allocated in updateGVaroemtMatrixFinite()
	// will be updated in updateGVarientMatrixFinite() => map_fun_setGvarient()
	const QuadMatrix *v;
	const double* s; 
	int gvNum;
	int pid;
};

typedef struct GVarientIJQuad GVarientIJQuad;



// quadMatrix *result should be nodeNum * stepNum
// result should be pre-allocated
void quadNonlinearSimulation(const SparseNetlistQuad *netlist,QuadMatrix *result,const int threadNum,const int dumpNodeIndex);


#endif
@


1.5
log
@very ok verion ~ new pid funcs , good to linear and nonlinear
@
text
@d14 1
a14 1
struct GVarientIJ
d25 1
a25 1
typedef struct GVarientIJ GVarientIJ;
@


1.4
log
@ok version ~ new pid functions
@
text
@d22 1
@


1.3
log
@*** empty log message ***
@
text
@d11 1
@


1.2
log
@*** empty log message ***
@
text
@a5 1
#include "parallel.h"
@


1.1
log
@Initial revision
@
text
@d11 1
@
