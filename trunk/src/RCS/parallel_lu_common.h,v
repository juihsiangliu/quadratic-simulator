head	1.4;
access;
symbols;
locks
	d96041:1.4; strict;
comment	@ * @;


1.4
date	2010.11.14.12.54.27;	author d96041;	state Exp;
branches;
next	1.3;

1.3
date	2010.10.13.13.17.37;	author d96041;	state Exp;
branches;
next	1.2;

1.2
date	2010.07.17.09.06.10;	author d96041;	state Exp;
branches;
next	1.1;

1.1
date	2010.06.28.12.54.39;	author r97124;	state Exp;
branches;
next	;


desc
@@


1.4
log
@*** empty log message ***
@
text
@#ifndef PARALLEL_LU_COMMON_H
#define PARALLEL_LU_COMMON_H


#include <gdsl_types.h>
#include <gdsl_queue.h>
#include <gsl_math.h>
#include "mempool.h"
#include "partition_double.h"


gdsl_element_t alloc_int(void *ptr);
void free_int(gdsl_element_t e);
int gdsl_queue_get_size_mutex(gdsl_queue_t queue);
void getInitSinkList(gdsl_queue_t freeSinkList, const ParallelETree *tree);
void updateFreeSinkList(gdsl_queue_t freeSinkList, ParallelETree *tree, const int currentNodeIndex);
void getDoneRowInfo(ParallelETree *tree,const gdsl_queue_t freeSinkListSrc);



void safeWaitFlagMatrix(int *flag,int index);



void initActiveThread(void);
void incActiveThread(void);
void decActiveThread(void);
int getActiveThread(void);


struct ToDoList
{
	int currentSize;
	int list[15];
};

typedef struct ToDoList ToDoList;


ToDoList *createToDoList(void);
void freeToDoList(ToDoList *ptr);
int getFirstToDoList(ToDoList *ptr);
void dumpToDoList(FILE *fp,ToDoList *ptr);
void sortParentsToHeadToDoList(ToDoList *ptr,const int key);
void pushBackToDoList(ToDoList *ptr, int data);

#endif
@


1.3
log
@ok version
@
text
@d20 27
@


1.2
log
@*** empty log message ***
@
text
@d19 1
@


1.1
log
@Initial revision
@
text
@d17 1
a17 1

@
