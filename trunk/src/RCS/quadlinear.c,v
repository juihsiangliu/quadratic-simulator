head	1.22;
access;
symbols;
locks
	d96041:1.22; strict;
comment	@ * @;


1.22
date	2010.10.23.10.47.11;	author d96041;	state Exp;
branches;
next	1.21;

1.21
date	2010.10.09.09.10.45;	author d96041;	state Exp;
branches;
next	1.20;

1.20
date	2010.10.08.12.57.41;	author d96041;	state Exp;
branches;
next	1.19;

1.19
date	2010.10.06.14.04.02;	author d96041;	state Exp;
branches;
next	1.18;

1.18
date	2010.09.17.08.56.55;	author d96041;	state Exp;
branches;
next	1.17;

1.17
date	2010.09.14.16.18.13;	author d96041;	state Exp;
branches;
next	1.16;

1.16
date	2010.09.12.10.24.45;	author d96041;	state Exp;
branches;
next	1.15;

1.15
date	2010.09.07.13.04.39;	author d96041;	state Exp;
branches;
next	1.14;

1.14
date	2010.08.28.08.42.46;	author d96041;	state Exp;
branches;
next	1.13;

1.13
date	2010.08.25.12.54.50;	author d96041;	state Exp;
branches;
next	1.12;

1.12
date	2010.08.22.12.59.37;	author d96041;	state Exp;
branches;
next	1.11;

1.11
date	2010.08.18.13.20.17;	author d96041;	state Exp;
branches;
next	1.10;

1.10
date	2010.08.15.07.54.39;	author d96041;	state Exp;
branches;
next	1.9;

1.9
date	2010.08.14.09.27.17;	author d96041;	state Exp;
branches;
next	1.8;

1.8
date	2010.08.10.12.57.05;	author d96041;	state Exp;
branches;
next	1.7;

1.7
date	2010.08.02.12.08.24;	author d96041;	state Exp;
branches;
next	1.6;

1.6
date	2010.07.30.13.16.58;	author d96041;	state Exp;
branches;
next	1.5;

1.5
date	2010.07.17.09.04.42;	author d96041;	state Exp;
branches;
next	1.4;

1.4
date	2010.06.28.10.03.26;	author r97124;	state Exp;
branches;
next	1.3;

1.3
date	2010.06.25.09.42.26;	author r97124;	state Exp;
branches;
next	1.2;

1.2
date	2010.06.25.07.22.57;	author r97124;	state Exp;
branches;
next	1.1;

1.1
date	2010.06.24.08.33.07;	author r97124;	state Exp;
branches;
next	;


desc
@@


1.22
log
@ok version
@
text
@#include "quadlinear.h"


// result should be nodeNum * stepNum
// result should be pre-allocated
void sparseQuadLinearSimulation(const SparseNetlistQuad *netlist,QuadMatrix *result,const int threadNum,const int dumpNodeIndex)
{
	QuadMatrix *uCurrent = createQuadMatrix(netlist->nodeNum,1,netlist->gvNum);
	QuadMatrix *vCurrent = createQuadMatrix(netlist->nodeNum,1,netlist->gvNum);
	QuadMatrix *zv = createQuadMatrix(netlist->nodeNum,1,netlist->gvNum);
	QuadMatrix *bu= createQuadMatrix(netlist->nodeNum,1,netlist->gvNum);
	QuadMatrix *zvbu = createQuadMatrix(netlist->nodeNum,1,netlist->gvNum);
	QuadMatrix *vDC = createQuadMatrix(netlist->nodeNum,1,netlist->gvNum);
	SparseQuadMatrix *y = createSparseQuadMatrix(netlist->nodeNum,netlist->nodeNum,netlist->gvNum);
	SparseQuadMatrix *yRefine = createSparseQuadMatrix(netlist->nodeNum,netlist->nodeNum,netlist->gvNum);
	SparseQuadMatrix *z = createSparseQuadMatrix(netlist->nodeNum,netlist->nodeNum,netlist->gvNum);
	// used for lu decompostion
	SparseQuadMatrix *p = createSparseQuadMatrix(netlist->nodeNum,netlist->nodeNum,netlist->gvNum);
	SparseQuadMatrix *pTrans = createSparseQuadMatrix(netlist->nodeNum,netlist->nodeNum,netlist->gvNum);
	SparseQuadMatrix *l = createSparseQuadMatrix(netlist->nodeNum,netlist->nodeNum,netlist->gvNum);
	SparseQuadMatrix *u = createSparseQuadMatrix(netlist->nodeNum,netlist->nodeNum,netlist->gvNum);
	// z = c/dt
	scaleSparseQuadMatrix(z,1.0/netlist->deltaT,netlist->c);
	// y = z - a	
	subSparseQuadMatrix(y,z,netlist->a);

	time_t reorderBegin,reorderEnd,luBegin,luEnd;

	if(threadNum == 0)
	{
		time(&reorderBegin);
		amdSparseQuadMatrix(p,y);
		transSparseQuadMatrix(pTrans,p);
		permutateSparseQuadMatrix(yRefine,p,pTrans,y);
		time(&reorderEnd);
		fprintf(stderr,"reordering time: %g\n",difftime(reorderEnd,reorderBegin));
		time(&luBegin);
		luSparseQuadMatrix(l,u,yRefine);
		time(&luEnd);
		fprintf(stderr,"lu time:%g\n",difftime(luEnd,luBegin));
/*
		const int goalPartition = 8;
		ParallelETree *tree2 = createParallelETree(goalPartition*2 + goalPartition+1);
		time(&reorderBegin);
		partitionSparseQuadMatrix(p,pTrans,tree2,yRefine,y,goalPartition);
		time(&reorderEnd);
		fprintf(stderr,"reordering time: %g\n",difftime(reorderEnd,reorderBegin));
		time(&luBegin);
	    luSparseQuadMatrix(l,u,yRefine);
		time(&luEnd);
		fprintf(stderr,"lu time:%g\n",difftime(luEnd,luBegin));
		freeParallelETree(tree2);
	//	dumpSparseQuadMatrix(stdout,yRefine);
*/
	}
	else
	{
//		const int goalPartition = threadNum;
		const int goalPartition = 8;
		ParallelETree *tree2 = createParallelETree(goalPartition*2 + goalPartition+1);
		time(&reorderBegin);
		partitionSparseQuadMatrix(p,pTrans,tree2,yRefine,y,goalPartition);
		time(&reorderEnd);
		fprintf(stderr,"reordering time: %g\n",difftime(reorderEnd,reorderBegin));
		time(&luBegin);
	    parallelLUQuad(l,u,tree2,yRefine,threadNum);
		time(&luEnd);
		fprintf(stderr,"lu time:%g\n",difftime(luEnd,luBegin));
		freeParallelETree(tree2);

	}


	// set the initial of v to result (stamp result[0])
	setZeroQuadMatrix(vCurrent);	

	int i;
	// predict the nodal voltage of i+1 step
	
	i = netlist->stepNum;

	for(i=0;i<netlist->stepNum-1;i++)
	{
//		fprintf(stderr,"step: %d\n",i);
		// z * vt
//		getColCopyQuadMatrix(vCurrent,i,result);
		mulVecSparseQuadMatrix(zv,z,vCurrent);
		// b *ut
		getColCopyQuadMatrix(uCurrent,i,netlist->u);
		mulVecSparseQuadMatrix(bu,netlist->b,uCurrent);
		// z*vt + b*ut
		addQuadMatrix(zvbu,zv,bu);
		triSolveSparseQuadMatrix(vCurrent,p,pTrans,l,u,zvbu);
		setQuadMatrix(result,getPtrEntryQuadMatrix(vCurrent,dumpNodeIndex,0),0,i+1);
//		setColQuadMatrix(result,vDC,i+1);
//		dumpQuadMatrix(vCurrent);
	}

	freeSparseQuadMatrix(p);
	freeSparseQuadMatrix(pTrans);
	freeSparseQuadMatrix(l);
	freeSparseQuadMatrix(u);
	freeSparseQuadMatrix(y);
	freeSparseQuadMatrix(yRefine);
	freeSparseQuadMatrix(z);
	freeQuadMatrix(uCurrent);
	freeQuadMatrix(vCurrent);
	freeQuadMatrix(zv);
	freeQuadMatrix(bu);
	freeQuadMatrix(zvbu);
	freeQuadMatrix(vDC);
}
@


1.21
log
@ok version, 1 thread changed
@
text
@a30 1

@


1.20
log
@ok version
@
text
@d27 3
a29 2
	time_t reorderBegin,reorderEnd,luBegin,luEnd;	
	if(threadNum == 1)
@


1.19
log
@*** empty log message ***
@
text
@d30 1
a30 1
/*
d41 1
a41 2
*/

d54 1
@


1.18
log
@ok version
@
text
@d29 2
a30 1
	{	
d41 3
a43 2
/*
		const int goalPartition = 4;
a53 1
*/
@


1.17
log
@very ok version ~ new pid functions , done linear and non-linear
@
text
@d29 1
a29 2
	{
	
a39 1

d58 1
a58 1
		const int goalPartition = 4;
@


1.16
log
@ok version ~ new pid func..
@
text
@d41 1
d50 1
a50 1
	    luSparseQuadMatrix(l,u,yRefine,1);
@


1.15
log
@ok version ~
@
text
@d92 1
a92 1
		addQuadMatrix(zvbu,zv,bu,1);
@


1.14
log
@ok version ~ new pid api
@
text
@d38 1
a38 1
		luSparseQuadMatrix(l,u,yRefine,threadNum);
@


1.13
log
@ok version ~ partition to 4 is a magic number
@
text
@d30 2
a31 1
/*		
d34 4
a37 2
		mulSparseQuadMatrix(yRefine,p,y);
		mulSparseQuadMatrix(yRefine,yRefine,pTrans);
d39 4
a42 2
*/
		const int goalPartition = 8;
d53 1
a53 1

@


1.12
log
@ok version ..
@
text
@d54 1
a54 1
		const int goalPartition = 8;
@


1.11
log
@ok version ... some get and ret to mempool will decrease the performance ....
@
text
@d37 1
a37 1
		const int goalPartition = 4;
d54 1
a54 1
		const int goalPartition = 4;
@


1.10
log
@ok version ~ the same elimination in two cases
@
text
@d37 1
a37 1
		const int goalPartition = 8;
d54 1
a54 1
		const int goalPartition = 8;
@


1.9
log
@ok version ~ fast get, set, del ...
@
text
@d37 1
a37 1
		const int goalPartition = 2;
d53 2
a54 1
		const int goalPartition = threadNum;
@


1.8
log
@*** empty log message ***
@
text
@d37 1
a37 1
		const int goalPartition = 4;
@


1.7
log
@parallel_Quad ok
@
text
@a65 1
	exit(0);	
@


1.6
log
@quad linear ok ?
@
text
@d62 2
a64 1
//		exit(0);
d66 1
a66 1
	
d74 3
@


1.5
log
@*** empty log message ***
@
text
@d63 4
a67 3
		exit(0);
	}
		
@


1.4
log
@*** empty log message ***
@
text
@d54 8
d63 2
@


1.3
log
@*** empty log message ***
@
text
@d27 1
d30 1
d35 13
a49 1
		luSparseQuadMatrix(l,u,yRefine,threadNum);
@


1.2
log
@*** empty log message ***
@
text
@d37 5
@


1.1
log
@Initial revision
@
text
@d27 6
a32 7
	amdSparseQuadMatrix(p,y);
	transSparseQuadMatrix(pTrans,p);
	mulSparseQuadMatrix(yRefine,p,y);
	mulSparseQuadMatrix(yRefine,yRefine,pTrans);

//	dumpSparseQuadMatrix(stdout,yRefine);
	luSparseQuadMatrix(l,u,yRefine,threadNum);
d34 4
a40 1

d53 1
a53 1
		addQuadMatrix(zvbu,zv,bu,threadNum);
@
