#ifndef MEMPOOL_H
#define MEMPOOL_H

#include <math.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <pthread.h>
#include "min_max_heap.h"


// the data structure that is used in the Mempool
/*
struct Memblock
{
	void *data;
};

typedef struct Memblock Memblock;
*/


struct Mempool
{
	char poolName[64];
	int maxNumOfBlock;
	int blockSize;

	// to the free block list  -- with heap data structure
	int heapSize;
	int maxHeapSize;
	void **freeList; 

	pthread_mutex_t mutex;
};

typedef struct Mempool Mempool;



struct MempoolSet
{
	int minBlockSize;
	int maxBlockSize;
	int hugeBlockSize;
	int numOfPool;
	int lgMinBlockSize;

	Mempool **poolSet;
	Mempool *huge; // for the very big blockSize
};

typedef struct MempoolSet MempoolSet;



// =====================================================================
MempoolSet * _pool;
MempoolSet ** _poolList;
int _poolListSize;

void createMempoolSet(const int minBlockSize,const int numOfMempool,const int hugeBlockSize,const int *const numOfBlockList,const int poolListSize);
void freeMempoolSet(void);

void *getMempoolSet(const int blockSize);
void *getPidMempoolSet(const int blockSize,const int pid);

void retMempoolSet(void *data, const int blockSize);
void retPidMempoolSet(void *data, const int blockSize,const int pid);

void dumpMempoolSet(FILE *fp);
void usageMempoolSet(FILE *fp);


#else

extern MempoolSet *_pool;
extern MempoolSet ** _poolList;
extern int _poolListSize;

#endif
